// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trojangoapi.proto

#include "trojangoapi.pb.h"
#include "trojangoapi.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace trojan {
namespace api {

static const char* TrojanClientService_method_names[] = {
  "/trojan.api.TrojanClientService/GetTraffic",
};

std::unique_ptr< TrojanClientService::Stub> TrojanClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TrojanClientService::Stub> stub(new TrojanClientService::Stub(channel));
  return stub;
}

TrojanClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTraffic_(TrojanClientService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TrojanClientService::Stub::GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::trojan::api::GetTrafficResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTraffic_, context, request, response);
}

void TrojanClientService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, std::move(f));
}

void TrojanClientService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, std::move(f));
}

void TrojanClientService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, reactor);
}

void TrojanClientService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>* TrojanClientService::Stub::AsyncGetTrafficRaw(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::trojan::api::GetTrafficResponse>::Create(channel_.get(), cq, rpcmethod_GetTraffic_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>* TrojanClientService::Stub::PrepareAsyncGetTrafficRaw(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::trojan::api::GetTrafficResponse>::Create(channel_.get(), cq, rpcmethod_GetTraffic_, context, request, false);
}

TrojanClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrojanClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrojanClientService::Service, ::trojan::api::GetTrafficRequest, ::trojan::api::GetTrafficResponse>(
          [](TrojanClientService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::trojan::api::GetTrafficRequest* req,
             ::trojan::api::GetTrafficResponse* resp) {
               return service->GetTraffic(ctx, req, resp);
             }, this)));
}

TrojanClientService::Service::~Service() {
}

::grpc::Status TrojanClientService::Service::GetTraffic(::grpc::ServerContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TrojanServerService_method_names[] = {
  "/trojan.api.TrojanServerService/ListUsers",
  "/trojan.api.TrojanServerService/GetUsers",
  "/trojan.api.TrojanServerService/SetUsers",
};

std::unique_ptr< TrojanServerService::Stub> TrojanServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TrojanServerService::Stub> stub(new TrojanServerService::Stub(channel));
  return stub;
}

TrojanServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListUsers_(TrojanServerService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetUsers_(TrojanServerService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SetUsers_(TrojanServerService_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::trojan::api::ListUsersResponse>* TrojanServerService::Stub::ListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::trojan::api::ListUsersResponse>::Create(channel_.get(), rpcmethod_ListUsers_, context, request);
}

void TrojanServerService::Stub::experimental_async::ListUsers(::grpc::ClientContext* context, ::trojan::api::ListUsersRequest* request, ::grpc::experimental::ClientReadReactor< ::trojan::api::ListUsersResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::trojan::api::ListUsersResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListUsers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>* TrojanServerService::Stub::AsyncListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::trojan::api::ListUsersResponse>::Create(channel_.get(), cq, rpcmethod_ListUsers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>* TrojanServerService::Stub::PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::trojan::api::ListUsersResponse>::Create(channel_.get(), cq, rpcmethod_ListUsers_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* TrojanServerService::Stub::GetUsersRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>::Create(channel_.get(), rpcmethod_GetUsers_, context);
}

void TrojanServerService::Stub::experimental_async::GetUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::trojan::api::GetUsersRequest,::trojan::api::GetUsersResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::trojan::api::GetUsersRequest,::trojan::api::GetUsersResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetUsers_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* TrojanServerService::Stub::AsyncGetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>::Create(channel_.get(), cq, rpcmethod_GetUsers_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* TrojanServerService::Stub::PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>::Create(channel_.get(), cq, rpcmethod_GetUsers_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* TrojanServerService::Stub::SetUsersRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>::Create(channel_.get(), rpcmethod_SetUsers_, context);
}

void TrojanServerService::Stub::experimental_async::SetUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::trojan::api::SetUsersRequest,::trojan::api::SetUsersResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::trojan::api::SetUsersRequest,::trojan::api::SetUsersResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SetUsers_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* TrojanServerService::Stub::AsyncSetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>::Create(channel_.get(), cq, rpcmethod_SetUsers_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* TrojanServerService::Stub::PrepareAsyncSetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>::Create(channel_.get(), cq, rpcmethod_SetUsers_, context, false, nullptr);
}

TrojanServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrojanServerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TrojanServerService::Service, ::trojan::api::ListUsersRequest, ::trojan::api::ListUsersResponse>(
          [](TrojanServerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::trojan::api::ListUsersRequest* req,
             ::grpc_impl::ServerWriter<::trojan::api::ListUsersResponse>* writer) {
               return service->ListUsers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrojanServerService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TrojanServerService::Service, ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>(
          [](TrojanServerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::trojan::api::GetUsersResponse,
             ::trojan::api::GetUsersRequest>* stream) {
               return service->GetUsers(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrojanServerService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TrojanServerService::Service, ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>(
          [](TrojanServerService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::trojan::api::SetUsersResponse,
             ::trojan::api::SetUsersRequest>* stream) {
               return service->SetUsers(ctx, stream);
             }, this)));
}

TrojanServerService::Service::~Service() {
}

::grpc::Status TrojanServerService::Service::ListUsers(::grpc::ServerContext* context, const ::trojan::api::ListUsersRequest* request, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrojanServerService::Service::GetUsers(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrojanServerService::Service::SetUsers(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace trojan
}  // namespace api

