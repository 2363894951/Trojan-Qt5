// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trojangoapi.proto
#ifndef GRPC_trojangoapi_2eproto__INCLUDED
#define GRPC_trojangoapi_2eproto__INCLUDED

#include "trojangoapi.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace trojan {
namespace api {

class TrojanClientService final {
 public:
  static constexpr char const* service_full_name() {
    return "trojan.api.TrojanClientService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::trojan::api::GetTrafficResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trojan::api::GetTrafficResponse>> AsyncGetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trojan::api::GetTrafficResponse>>(AsyncGetTrafficRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trojan::api::GetTrafficResponse>> PrepareAsyncGetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trojan::api::GetTrafficResponse>>(PrepareAsyncGetTrafficRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::trojan::api::GetTrafficResponse>* AsyncGetTrafficRaw(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::trojan::api::GetTrafficResponse>* PrepareAsyncGetTrafficRaw(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::trojan::api::GetTrafficResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>> AsyncGetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>>(AsyncGetTrafficRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>> PrepareAsyncGetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>>(PrepareAsyncGetTrafficRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTraffic(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trojan::api::GetTrafficResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>* AsyncGetTrafficRaw(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::trojan::api::GetTrafficResponse>* PrepareAsyncGetTrafficRaw(::grpc::ClientContext* context, const ::trojan::api::GetTrafficRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTraffic_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTraffic(::grpc::ServerContext* context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTraffic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTraffic(::grpc::ServerContext* context, ::trojan::api::GetTrafficRequest* request, ::grpc::ServerAsyncResponseWriter< ::trojan::api::GetTrafficResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTraffic<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTraffic() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::trojan::api::GetTrafficRequest, ::trojan::api::GetTrafficResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::trojan::api::GetTrafficRequest* request, ::trojan::api::GetTrafficResponse* response) { return this->GetTraffic(context, request, response); }));}
    void SetMessageAllocatorFor_GetTraffic(
        ::grpc::experimental::MessageAllocator< ::trojan::api::GetTrafficRequest, ::trojan::api::GetTrafficResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::trojan::api::GetTrafficRequest, ::trojan::api::GetTrafficResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTraffic(
      ::grpc::CallbackServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTraffic(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetTraffic<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetTraffic<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTraffic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTraffic() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTraffic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTraffic() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTraffic(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTraffic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTraffic(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTraffic() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::trojan::api::GetTrafficRequest, ::trojan::api::GetTrafficResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::trojan::api::GetTrafficRequest, ::trojan::api::GetTrafficResponse>* streamer) {
                       return this->StreamedGetTraffic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::trojan::api::GetTrafficRequest* /*request*/, ::trojan::api::GetTrafficResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTraffic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::trojan::api::GetTrafficRequest,::trojan::api::GetTrafficResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTraffic<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTraffic<Service > StreamedService;
};

class TrojanServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "trojan.api.TrojanServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // list all users
    std::unique_ptr< ::grpc::ClientReaderInterface< ::trojan::api::ListUsersResponse>> ListUsers(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::trojan::api::ListUsersResponse>>(ListUsersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trojan::api::ListUsersResponse>> AsyncListUsers(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trojan::api::ListUsersResponse>>(AsyncListUsersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trojan::api::ListUsersResponse>> PrepareAsyncListUsers(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trojan::api::ListUsersResponse>>(PrepareAsyncListUsersRaw(context, request, cq));
    }
    // obtain specified user's info
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>> GetUsers(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>>(GetUsersRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>> AsyncGetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>>(AsyncGetUsersRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>> PrepareAsyncGetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>>(PrepareAsyncGetUsersRaw(context, cq));
    }
    // setup exsisting users' config
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>> SetUsers(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>>(SetUsersRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>> AsyncSetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>>(AsyncSetUsersRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>> PrepareAsyncSetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>>(PrepareAsyncSetUsersRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // list all users
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListUsers(::grpc::ClientContext* context, ::trojan::api::ListUsersRequest* request, ::grpc::ClientReadReactor< ::trojan::api::ListUsersResponse>* reactor) = 0;
      #else
      virtual void ListUsers(::grpc::ClientContext* context, ::trojan::api::ListUsersRequest* request, ::grpc::experimental::ClientReadReactor< ::trojan::api::ListUsersResponse>* reactor) = 0;
      #endif
      // obtain specified user's info
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetUsers(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::trojan::api::GetUsersRequest,::trojan::api::GetUsersResponse>* reactor) = 0;
      #else
      virtual void GetUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::trojan::api::GetUsersRequest,::trojan::api::GetUsersResponse>* reactor) = 0;
      #endif
      // setup exsisting users' config
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetUsers(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::trojan::api::SetUsersRequest,::trojan::api::SetUsersResponse>* reactor) = 0;
      #else
      virtual void SetUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::trojan::api::SetUsersRequest,::trojan::api::SetUsersResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::trojan::api::ListUsersResponse>* ListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::trojan::api::ListUsersResponse>* AsyncListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::trojan::api::ListUsersResponse>* PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* GetUsersRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* AsyncGetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* SetUsersRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* AsyncSetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* PrepareAsyncSetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::trojan::api::ListUsersResponse>> ListUsers(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::trojan::api::ListUsersResponse>>(ListUsersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>> AsyncListUsers(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>>(AsyncListUsersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>> PrepareAsyncListUsers(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>>(PrepareAsyncListUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>> GetUsers(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>>(GetUsersRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>> AsyncGetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>>(AsyncGetUsersRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>> PrepareAsyncGetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>>(PrepareAsyncGetUsersRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>> SetUsers(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>>(SetUsersRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>> AsyncSetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>>(AsyncSetUsersRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>> PrepareAsyncSetUsers(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>>(PrepareAsyncSetUsersRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListUsers(::grpc::ClientContext* context, ::trojan::api::ListUsersRequest* request, ::grpc::ClientReadReactor< ::trojan::api::ListUsersResponse>* reactor) override;
      #else
      void ListUsers(::grpc::ClientContext* context, ::trojan::api::ListUsersRequest* request, ::grpc::experimental::ClientReadReactor< ::trojan::api::ListUsersResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetUsers(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::trojan::api::GetUsersRequest,::trojan::api::GetUsersResponse>* reactor) override;
      #else
      void GetUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::trojan::api::GetUsersRequest,::trojan::api::GetUsersResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetUsers(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::trojan::api::SetUsersRequest,::trojan::api::SetUsersResponse>* reactor) override;
      #else
      void SetUsers(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::trojan::api::SetUsersRequest,::trojan::api::SetUsersResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::trojan::api::ListUsersResponse>* ListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request) override;
    ::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>* AsyncListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::trojan::api::ListUsersResponse>* PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::trojan::api::ListUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* GetUsersRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* AsyncGetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* SetUsersRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* AsyncSetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* PrepareAsyncSetUsersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_SetUsers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // list all users
    virtual ::grpc::Status ListUsers(::grpc::ServerContext* context, const ::trojan::api::ListUsersRequest* request, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* writer);
    // obtain specified user's info
    virtual ::grpc::Status GetUsers(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* stream);
    // setup exsisting users' config
    virtual ::grpc::Status SetUsers(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListUsers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUsers(::grpc::ServerContext* context, ::trojan::api::ListUsersRequest* request, ::grpc::ServerAsyncWriter< ::trojan::api::ListUsersResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetUsers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListUsers<WithAsyncMethod_GetUsers<WithAsyncMethod_SetUsers<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::trojan::api::ListUsersRequest, ::trojan::api::ListUsersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::trojan::api::ListUsersRequest* request) { return this->ListUsers(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::trojan::api::ListUsersResponse>* ListUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::trojan::api::ListUsersResponse>* ListUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetUsers(context); }));
    }
    ~ExperimentalWithCallbackMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* GetUsers(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::trojan::api::GetUsersRequest, ::trojan::api::GetUsersResponse>* GetUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->SetUsers(context); }));
    }
    ~ExperimentalWithCallbackMethod_SetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* SetUsers(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::trojan::api::SetUsersRequest, ::trojan::api::SetUsersResponse>* SetUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListUsers<ExperimentalWithCallbackMethod_GetUsers<ExperimentalWithCallbackMethod_SetUsers<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListUsers<ExperimentalWithCallbackMethod_GetUsers<ExperimentalWithCallbackMethod_SetUsers<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListUsers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetUsers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListUsers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetUsers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUsers(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ListUsers(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetUsers(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::GetUsersResponse, ::trojan::api::GetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetUsers(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetUsers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->SetUsers(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUsers(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::trojan::api::SetUsersResponse, ::trojan::api::SetUsersRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SetUsers(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SetUsers(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListUsers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::trojan::api::ListUsersRequest, ::trojan::api::ListUsersResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::trojan::api::ListUsersRequest, ::trojan::api::ListUsersResponse>* streamer) {
                       return this->StreamedListUsers(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::trojan::api::ListUsersRequest* /*request*/, ::grpc::ServerWriter< ::trojan::api::ListUsersResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListUsers(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::trojan::api::ListUsersRequest,::trojan::api::ListUsersResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListUsers<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListUsers<Service > StreamedService;
};

}  // namespace api
}  // namespace trojan


#endif  // GRPC_trojangoapi_2eproto__INCLUDED
