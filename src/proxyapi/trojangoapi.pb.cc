// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trojangoapi.proto

#include "trojangoapi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed_trojangoapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Traffic_trojangoapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_trojangoapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UserStatus_trojangoapi_2eproto;
namespace trojan {
namespace api {
class TrafficDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Traffic> _instance;
} _Traffic_default_instance_;
class SpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Speed> _instance;
} _Speed_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class UserStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserStatus> _instance;
} _UserStatus_default_instance_;
class GetTrafficRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrafficRequest> _instance;
} _GetTrafficRequest_default_instance_;
class GetTrafficResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrafficResponse> _instance;
} _GetTrafficResponse_default_instance_;
class ListUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsersRequest> _instance;
} _ListUsersRequest_default_instance_;
class ListUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsersResponse> _instance;
} _ListUsersResponse_default_instance_;
class GetUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUsersRequest> _instance;
} _GetUsersRequest_default_instance_;
class GetUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUsersResponse> _instance;
} _GetUsersResponse_default_instance_;
class SetUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetUsersRequest> _instance;
} _SetUsersRequest_default_instance_;
class SetUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetUsersResponse> _instance;
} _SetUsersResponse_default_instance_;
}  // namespace api
}  // namespace trojan
static void InitDefaultsscc_info_GetTrafficRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_GetTrafficRequest_default_instance_;
    new (ptr) ::trojan::api::GetTrafficRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::GetTrafficRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTrafficRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTrafficRequest_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_GetTrafficResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_GetTrafficResponse_default_instance_;
    new (ptr) ::trojan::api::GetTrafficResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::GetTrafficResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetTrafficResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetTrafficResponse_trojangoapi_2eproto}, {
      &scc_info_Traffic_trojangoapi_2eproto.base,
      &scc_info_Speed_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_GetUsersRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_GetUsersRequest_default_instance_;
    new (ptr) ::trojan::api::GetUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::GetUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUsersRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUsersRequest_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_GetUsersResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_GetUsersResponse_default_instance_;
    new (ptr) ::trojan::api::GetUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::GetUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetUsersResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetUsersResponse_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,
      &scc_info_UserStatus_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_ListUsersRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_ListUsersRequest_default_instance_;
    new (ptr) ::trojan::api::ListUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::ListUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUsersRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUsersRequest_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_ListUsersResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_ListUsersResponse_default_instance_;
    new (ptr) ::trojan::api::ListUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::ListUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListUsersResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListUsersResponse_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,
      &scc_info_UserStatus_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_SetUsersRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_SetUsersRequest_default_instance_;
    new (ptr) ::trojan::api::SetUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::SetUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetUsersRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetUsersRequest_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,
      &scc_info_Speed_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_SetUsersResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_SetUsersResponse_default_instance_;
    new (ptr) ::trojan::api::SetUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::SetUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetUsersResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetUsersResponse_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_Speed_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_Speed_default_instance_;
    new (ptr) ::trojan::api::Speed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::Speed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Speed_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_Traffic_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_Traffic_default_instance_;
    new (ptr) ::trojan::api::Traffic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::Traffic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Traffic_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Traffic_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_User_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_User_default_instance_;
    new (ptr) ::trojan::api::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_User_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_UserStatus_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_UserStatus_default_instance_;
    new (ptr) ::trojan::api::UserStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::UserStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UserStatus_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UserStatus_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,
      &scc_info_Traffic_trojangoapi_2eproto.base,
      &scc_info_Speed_trojangoapi_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trojangoapi_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trojangoapi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trojangoapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trojangoapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Traffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Traffic, upload_traffic_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::Traffic, download_traffic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Speed, upload_speed_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::Speed, download_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::User, password_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::User, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, user_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, traffic_total_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, speed_current_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, ip_current_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::UserStatus, ip_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, success_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, info_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, traffic_total_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, speed_current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUsersResponse, user_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUsersResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersResponse, success_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersResponse, info_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersResponse, user_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetUsersResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersRequest, user_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersRequest, operation_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersRequest, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersRequest, ip_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersResponse, success_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUsersResponse, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trojan::api::Traffic)},
  { 7, -1, sizeof(::trojan::api::Speed)},
  { 14, -1, sizeof(::trojan::api::User)},
  { 21, -1, sizeof(::trojan::api::UserStatus)},
  { 32, -1, sizeof(::trojan::api::GetTrafficRequest)},
  { 38, -1, sizeof(::trojan::api::GetTrafficResponse)},
  { 47, -1, sizeof(::trojan::api::ListUsersRequest)},
  { 52, -1, sizeof(::trojan::api::ListUsersResponse)},
  { 59, -1, sizeof(::trojan::api::GetUsersRequest)},
  { 65, -1, sizeof(::trojan::api::GetUsersResponse)},
  { 74, -1, sizeof(::trojan::api::SetUsersRequest)},
  { 83, -1, sizeof(::trojan::api::SetUsersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_Traffic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_Speed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_UserStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_GetTrafficRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_GetTrafficResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_ListUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_ListUsersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_GetUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_GetUsersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_SetUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_SetUsersResponse_default_instance_),
};

const char descriptor_table_protodef_trojangoapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021trojangoapi.proto\022\ntrojan.api\";\n\007Traff"
  "ic\022\026\n\016upload_traffic\030\001 \001(\004\022\030\n\020download_t"
  "raffic\030\002 \001(\004\"5\n\005Speed\022\024\n\014upload_speed\030\001 "
  "\001(\004\022\026\n\016download_speed\030\002 \001(\004\"&\n\004User\022\020\n\010p"
  "assword\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t\"\320\001\n\nUserStat"
  "us\022\036\n\004user\030\001 \001(\0132\020.trojan.api.User\022*\n\rtr"
  "affic_total\030\002 \001(\0132\023.trojan.api.Traffic\022("
  "\n\rspeed_current\030\003 \001(\0132\021.trojan.api.Speed"
  "\022&\n\013speed_limit\030\004 \001(\0132\021.trojan.api.Speed"
  "\022\022\n\nip_current\030\005 \001(\005\022\020\n\010ip_limit\030\006 \001(\005\"3"
  "\n\021GetTrafficRequest\022\036\n\004user\030\001 \001(\0132\020.troj"
  "an.api.User\"\211\001\n\022GetTrafficResponse\022\017\n\007su"
  "ccess\030\001 \001(\010\022\014\n\004info\030\002 \001(\t\022*\n\rtraffic_tot"
  "al\030\003 \001(\0132\023.trojan.api.Traffic\022(\n\rspeed_c"
  "urrent\030\004 \001(\0132\021.trojan.api.Speed\"\022\n\020ListU"
  "sersRequest\"[\n\021ListUsersResponse\022\036\n\004user"
  "\030\001 \001(\0132\020.trojan.api.User\022&\n\006status\030\002 \001(\013"
  "2\026.trojan.api.UserStatus\"1\n\017GetUsersRequ"
  "est\022\036\n\004user\030\001 \001(\0132\020.trojan.api.User\"y\n\020G"
  "etUsersResponse\022\017\n\007success\030\001 \001(\010\022\014\n\004info"
  "\030\002 \001(\t\022\036\n\004user\030\003 \001(\0132\020.trojan.api.User\022&"
  "\n\006status\030\004 \001(\0132\026.trojan.api.UserStatus\"\323"
  "\001\n\017SetUsersRequest\022\036\n\004user\030\001 \001(\0132\020.troja"
  "n.api.User\0228\n\toperation\030\002 \001(\0162%.trojan.a"
  "pi.SetUsersRequest.Operation\022&\n\013speed_li"
  "mit\030\003 \001(\0132\021.trojan.api.Speed\022\020\n\010ip_limit"
  "\030\004 \001(\005\",\n\tOperation\022\007\n\003Add\020\000\022\n\n\006Delete\020\001"
  "\022\n\n\006Modify\020\002\"1\n\020SetUsersResponse\022\017\n\007succ"
  "ess\030\001 \001(\010\022\014\n\004info\030\002 \001(\t2d\n\023TrojanClientS"
  "ervice\022M\n\nGetTraffic\022\035.trojan.api.GetTra"
  "fficRequest\032\036.trojan.api.GetTrafficRespo"
  "nse\"\0002\375\001\n\023TrojanServerService\022L\n\tListUse"
  "rs\022\034.trojan.api.ListUsersRequest\032\035.troja"
  "n.api.ListUsersResponse\"\0000\001\022K\n\010GetUsers\022"
  "\033.trojan.api.GetUsersRequest\032\034.trojan.ap"
  "i.GetUsersResponse\"\000(\0010\001\022K\n\010SetUsers\022\033.t"
  "rojan.api.SetUsersRequest\032\034.trojan.api.S"
  "etUsersResponse\"\000(\0010\001B\013Z\t.;serviceb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trojangoapi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trojangoapi_2eproto_sccs[12] = {
  &scc_info_GetTrafficRequest_trojangoapi_2eproto.base,
  &scc_info_GetTrafficResponse_trojangoapi_2eproto.base,
  &scc_info_GetUsersRequest_trojangoapi_2eproto.base,
  &scc_info_GetUsersResponse_trojangoapi_2eproto.base,
  &scc_info_ListUsersRequest_trojangoapi_2eproto.base,
  &scc_info_ListUsersResponse_trojangoapi_2eproto.base,
  &scc_info_SetUsersRequest_trojangoapi_2eproto.base,
  &scc_info_SetUsersResponse_trojangoapi_2eproto.base,
  &scc_info_Speed_trojangoapi_2eproto.base,
  &scc_info_Traffic_trojangoapi_2eproto.base,
  &scc_info_User_trojangoapi_2eproto.base,
  &scc_info_UserStatus_trojangoapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trojangoapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trojangoapi_2eproto = {
  false, false, descriptor_table_protodef_trojangoapi_2eproto, "trojangoapi.proto", 1522,
  &descriptor_table_trojangoapi_2eproto_once, descriptor_table_trojangoapi_2eproto_sccs, descriptor_table_trojangoapi_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_trojangoapi_2eproto::offsets,
  file_level_metadata_trojangoapi_2eproto, 12, file_level_enum_descriptors_trojangoapi_2eproto, file_level_service_descriptors_trojangoapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trojangoapi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trojangoapi_2eproto)), true);
namespace trojan {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetUsersRequest_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trojangoapi_2eproto);
  return file_level_enum_descriptors_trojangoapi_2eproto[0];
}
bool SetUsersRequest_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetUsersRequest_Operation SetUsersRequest::Add;
constexpr SetUsersRequest_Operation SetUsersRequest::Delete;
constexpr SetUsersRequest_Operation SetUsersRequest::Modify;
constexpr SetUsersRequest_Operation SetUsersRequest::Operation_MIN;
constexpr SetUsersRequest_Operation SetUsersRequest::Operation_MAX;
constexpr int SetUsersRequest::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Traffic::InitAsDefaultInstance() {
}
class Traffic::_Internal {
 public:
};

Traffic::Traffic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.Traffic)
}
Traffic::Traffic(const Traffic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_traffic_, &from.upload_traffic_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_traffic_) -
    reinterpret_cast<char*>(&upload_traffic_)) + sizeof(download_traffic_));
  // @@protoc_insertion_point(copy_constructor:trojan.api.Traffic)
}

void Traffic::SharedCtor() {
  ::memset(&upload_traffic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_traffic_) -
      reinterpret_cast<char*>(&upload_traffic_)) + sizeof(download_traffic_));
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:trojan.api.Traffic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Traffic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Traffic::ArenaDtor(void* object) {
  Traffic* _this = reinterpret_cast< Traffic* >(object);
  (void)_this;
}
void Traffic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Traffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Traffic& Traffic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Traffic_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upload_traffic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_traffic_) -
      reinterpret_cast<char*>(&upload_traffic_)) + sizeof(download_traffic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Traffic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 upload_traffic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upload_traffic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 download_traffic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          download_traffic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Traffic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 upload_traffic = 1;
  if (this->upload_traffic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_traffic(), target);
  }

  // uint64 download_traffic = 2;
  if (this->download_traffic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_download_traffic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.Traffic)
  return target;
}

size_t Traffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.Traffic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 upload_traffic = 1;
  if (this->upload_traffic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_upload_traffic());
  }

  // uint64 download_traffic = 2;
  if (this->download_traffic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_download_traffic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Traffic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  const Traffic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Traffic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.Traffic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.Traffic)
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload_traffic() != 0) {
    _internal_set_upload_traffic(from._internal_upload_traffic());
  }
  if (from.download_traffic() != 0) {
    _internal_set_download_traffic(from._internal_download_traffic());
  }
}

void Traffic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {
  return true;
}

void Traffic::InternalSwap(Traffic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Traffic, download_traffic_)
      + sizeof(Traffic::download_traffic_)
      - PROTOBUF_FIELD_OFFSET(Traffic, upload_traffic_)>(
          reinterpret_cast<char*>(&upload_traffic_),
          reinterpret_cast<char*>(&other->upload_traffic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Traffic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Speed::InitAsDefaultInstance() {
}
class Speed::_Internal {
 public:
};

Speed::Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.Speed)
}
Speed::Speed(const Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_speed_, &from.upload_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_speed_) -
    reinterpret_cast<char*>(&upload_speed_)) + sizeof(download_speed_));
  // @@protoc_insertion_point(copy_constructor:trojan.api.Speed)
}

void Speed::SharedCtor() {
  ::memset(&upload_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_speed_) -
      reinterpret_cast<char*>(&upload_speed_)) + sizeof(download_speed_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:trojan.api.Speed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Speed::ArenaDtor(void* object) {
  Speed* _this = reinterpret_cast< Speed* >(object);
  (void)_this;
}
void Speed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Speed& Speed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Speed_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upload_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_speed_) -
      reinterpret_cast<char*>(&upload_speed_)) + sizeof(download_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 upload_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upload_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 download_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          download_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Speed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 upload_speed = 1;
  if (this->upload_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_speed(), target);
  }

  // uint64 download_speed = 2;
  if (this->download_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_download_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.Speed)
  return target;
}

size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.Speed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 upload_speed = 1;
  if (this->upload_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_upload_speed());
  }

  // uint64 download_speed = 2;
  if (this->download_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_download_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Speed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.Speed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.Speed)
    MergeFrom(*source);
  }
}

void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload_speed() != 0) {
    _internal_set_upload_speed(from._internal_upload_speed());
  }
  if (from.download_speed() != 0) {
    _internal_set_download_speed(from._internal_download_speed());
  }
}

void Speed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  return true;
}

void Speed::InternalSwap(Speed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Speed, download_speed_)
      + sizeof(Speed::download_speed_)
      - PROTOBUF_FIELD_OFFSET(Speed, upload_speed_)>(
          reinterpret_cast<char*>(&upload_speed_),
          reinterpret_cast<char*>(&other->upload_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Speed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User::InitAsDefaultInstance() {
}
class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:trojan.api.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_trojangoapi_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

User::~User() {
  // @@protoc_insertion_point(destructor:trojan.api.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.User.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.User.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.User.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.User.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserStatus::InitAsDefaultInstance() {
  ::trojan::api::_UserStatus_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
  ::trojan::api::_UserStatus_default_instance_._instance.get_mutable()->traffic_total_ = const_cast< ::trojan::api::Traffic*>(
      ::trojan::api::Traffic::internal_default_instance());
  ::trojan::api::_UserStatus_default_instance_._instance.get_mutable()->speed_current_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
  ::trojan::api::_UserStatus_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
}
class UserStatus::_Internal {
 public:
  static const ::trojan::api::User& user(const UserStatus* msg);
  static const ::trojan::api::Traffic& traffic_total(const UserStatus* msg);
  static const ::trojan::api::Speed& speed_current(const UserStatus* msg);
  static const ::trojan::api::Speed& speed_limit(const UserStatus* msg);
};

const ::trojan::api::User&
UserStatus::_Internal::user(const UserStatus* msg) {
  return *msg->user_;
}
const ::trojan::api::Traffic&
UserStatus::_Internal::traffic_total(const UserStatus* msg) {
  return *msg->traffic_total_;
}
const ::trojan::api::Speed&
UserStatus::_Internal::speed_current(const UserStatus* msg) {
  return *msg->speed_current_;
}
const ::trojan::api::Speed&
UserStatus::_Internal::speed_limit(const UserStatus* msg) {
  return *msg->speed_limit_;
}
UserStatus::UserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.UserStatus)
}
UserStatus::UserStatus(const UserStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_traffic_total()) {
    traffic_total_ = new ::trojan::api::Traffic(*from.traffic_total_);
  } else {
    traffic_total_ = nullptr;
  }
  if (from._internal_has_speed_current()) {
    speed_current_ = new ::trojan::api::Speed(*from.speed_current_);
  } else {
    speed_current_ = nullptr;
  }
  if (from._internal_has_speed_limit()) {
    speed_limit_ = new ::trojan::api::Speed(*from.speed_limit_);
  } else {
    speed_limit_ = nullptr;
  }
  ::memcpy(&ip_current_, &from.ip_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_limit_) -
    reinterpret_cast<char*>(&ip_current_)) + sizeof(ip_limit_));
  // @@protoc_insertion_point(copy_constructor:trojan.api.UserStatus)
}

void UserStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserStatus_trojangoapi_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_limit_) -
      reinterpret_cast<char*>(&user_)) + sizeof(ip_limit_));
}

UserStatus::~UserStatus() {
  // @@protoc_insertion_point(destructor:trojan.api.UserStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete traffic_total_;
  if (this != internal_default_instance()) delete speed_current_;
  if (this != internal_default_instance()) delete speed_limit_;
}

void UserStatus::ArenaDtor(void* object) {
  UserStatus* _this = reinterpret_cast< UserStatus* >(object);
  (void)_this;
}
void UserStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserStatus& UserStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserStatus_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void UserStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.UserStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && traffic_total_ != nullptr) {
    delete traffic_total_;
  }
  traffic_total_ = nullptr;
  if (GetArena() == nullptr && speed_current_ != nullptr) {
    delete speed_current_;
  }
  speed_current_ = nullptr;
  if (GetArena() == nullptr && speed_limit_ != nullptr) {
    delete speed_limit_;
  }
  speed_limit_ = nullptr;
  ::memset(&ip_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_limit_) -
      reinterpret_cast<char*>(&ip_current_)) + sizeof(ip_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Traffic traffic_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip_current = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ip_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ip_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.UserStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .trojan.api.Traffic traffic_total = 2;
  if (this->has_traffic_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::traffic_total(this), target, stream);
  }

  // .trojan.api.Speed speed_current = 3;
  if (this->has_speed_current()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::speed_current(this), target, stream);
  }

  // .trojan.api.Speed speed_limit = 4;
  if (this->has_speed_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::speed_limit(this), target, stream);
  }

  // int32 ip_current = 5;
  if (this->ip_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ip_current(), target);
  }

  // int32 ip_limit = 6;
  if (this->ip_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ip_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.UserStatus)
  return target;
}

size_t UserStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.UserStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .trojan.api.Traffic traffic_total = 2;
  if (this->has_traffic_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_total_);
  }

  // .trojan.api.Speed speed_current = 3;
  if (this->has_speed_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_current_);
  }

  // .trojan.api.Speed speed_limit = 4;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_limit_);
  }

  // int32 ip_current = 5;
  if (this->ip_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip_current());
  }

  // int32 ip_limit = 6;
  if (this->ip_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.UserStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.UserStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.UserStatus)
    MergeFrom(*source);
  }
}

void UserStatus::MergeFrom(const UserStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.UserStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_traffic_total()) {
    _internal_mutable_traffic_total()->::trojan::api::Traffic::MergeFrom(from._internal_traffic_total());
  }
  if (from.has_speed_current()) {
    _internal_mutable_speed_current()->::trojan::api::Speed::MergeFrom(from._internal_speed_current());
  }
  if (from.has_speed_limit()) {
    _internal_mutable_speed_limit()->::trojan::api::Speed::MergeFrom(from._internal_speed_limit());
  }
  if (from.ip_current() != 0) {
    _internal_set_ip_current(from._internal_ip_current());
  }
  if (from.ip_limit() != 0) {
    _internal_set_ip_limit(from._internal_ip_limit());
  }
}

void UserStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.UserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatus::CopyFrom(const UserStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.UserStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatus::IsInitialized() const {
  return true;
}

void UserStatus::InternalSwap(UserStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserStatus, ip_limit_)
      + sizeof(UserStatus::ip_limit_)
      - PROTOBUF_FIELD_OFFSET(UserStatus, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTrafficRequest::InitAsDefaultInstance() {
  ::trojan::api::_GetTrafficRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
}
class GetTrafficRequest::_Internal {
 public:
  static const ::trojan::api::User& user(const GetTrafficRequest* msg);
};

const ::trojan::api::User&
GetTrafficRequest::_Internal::user(const GetTrafficRequest* msg) {
  return *msg->user_;
}
GetTrafficRequest::GetTrafficRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.GetTrafficRequest)
}
GetTrafficRequest::GetTrafficRequest(const GetTrafficRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trojan.api.GetTrafficRequest)
}

void GetTrafficRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTrafficRequest_trojangoapi_2eproto.base);
  user_ = nullptr;
}

GetTrafficRequest::~GetTrafficRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.GetTrafficRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTrafficRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void GetTrafficRequest::ArenaDtor(void* object) {
  GetTrafficRequest* _this = reinterpret_cast< GetTrafficRequest* >(object);
  (void)_this;
}
void GetTrafficRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTrafficRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTrafficRequest& GetTrafficRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTrafficRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void GetTrafficRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.GetTrafficRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTrafficRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.GetTrafficRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.GetTrafficRequest)
  return target;
}

size_t GetTrafficRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.GetTrafficRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrafficRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.GetTrafficRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrafficRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTrafficRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.GetTrafficRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.GetTrafficRequest)
    MergeFrom(*source);
  }
}

void GetTrafficRequest::MergeFrom(const GetTrafficRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.GetTrafficRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
}

void GetTrafficRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.GetTrafficRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrafficRequest::CopyFrom(const GetTrafficRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.GetTrafficRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficRequest::IsInitialized() const {
  return true;
}

void GetTrafficRequest::InternalSwap(GetTrafficRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTrafficResponse::InitAsDefaultInstance() {
  ::trojan::api::_GetTrafficResponse_default_instance_._instance.get_mutable()->traffic_total_ = const_cast< ::trojan::api::Traffic*>(
      ::trojan::api::Traffic::internal_default_instance());
  ::trojan::api::_GetTrafficResponse_default_instance_._instance.get_mutable()->speed_current_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
}
class GetTrafficResponse::_Internal {
 public:
  static const ::trojan::api::Traffic& traffic_total(const GetTrafficResponse* msg);
  static const ::trojan::api::Speed& speed_current(const GetTrafficResponse* msg);
};

const ::trojan::api::Traffic&
GetTrafficResponse::_Internal::traffic_total(const GetTrafficResponse* msg) {
  return *msg->traffic_total_;
}
const ::trojan::api::Speed&
GetTrafficResponse::_Internal::speed_current(const GetTrafficResponse* msg) {
  return *msg->speed_current_;
}
GetTrafficResponse::GetTrafficResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.GetTrafficResponse)
}
GetTrafficResponse::GetTrafficResponse(const GetTrafficResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  if (from._internal_has_traffic_total()) {
    traffic_total_ = new ::trojan::api::Traffic(*from.traffic_total_);
  } else {
    traffic_total_ = nullptr;
  }
  if (from._internal_has_speed_current()) {
    speed_current_ = new ::trojan::api::Speed(*from.speed_current_);
  } else {
    speed_current_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.GetTrafficResponse)
}

void GetTrafficResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTrafficResponse_trojangoapi_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&traffic_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&traffic_total_)) + sizeof(success_));
}

GetTrafficResponse::~GetTrafficResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.GetTrafficResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTrafficResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete traffic_total_;
  if (this != internal_default_instance()) delete speed_current_;
}

void GetTrafficResponse::ArenaDtor(void* object) {
  GetTrafficResponse* _this = reinterpret_cast< GetTrafficResponse* >(object);
  (void)_this;
}
void GetTrafficResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTrafficResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTrafficResponse& GetTrafficResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTrafficResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void GetTrafficResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.GetTrafficResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && traffic_total_ != nullptr) {
    delete traffic_total_;
  }
  traffic_total_ = nullptr;
  if (GetArena() == nullptr && speed_current_ != nullptr) {
    delete speed_current_;
  }
  speed_current_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.GetTrafficResponse.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Traffic traffic_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTrafficResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.GetTrafficResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.GetTrafficResponse.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  // .trojan.api.Traffic traffic_total = 3;
  if (this->has_traffic_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::traffic_total(this), target, stream);
  }

  // .trojan.api.Speed speed_current = 4;
  if (this->has_speed_current()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::speed_current(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.GetTrafficResponse)
  return target;
}

size_t GetTrafficResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.GetTrafficResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .trojan.api.Traffic traffic_total = 3;
  if (this->has_traffic_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_total_);
  }

  // .trojan.api.Speed speed_current = 4;
  if (this->has_speed_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_current_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrafficResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.GetTrafficResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrafficResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTrafficResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.GetTrafficResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.GetTrafficResponse)
    MergeFrom(*source);
  }
}

void GetTrafficResponse::MergeFrom(const GetTrafficResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.GetTrafficResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.has_traffic_total()) {
    _internal_mutable_traffic_total()->::trojan::api::Traffic::MergeFrom(from._internal_traffic_total());
  }
  if (from.has_speed_current()) {
    _internal_mutable_speed_current()->::trojan::api::Speed::MergeFrom(from._internal_speed_current());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void GetTrafficResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.GetTrafficResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrafficResponse::CopyFrom(const GetTrafficResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.GetTrafficResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficResponse::IsInitialized() const {
  return true;
}

void GetTrafficResponse::InternalSwap(GetTrafficResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTrafficResponse, success_)
      + sizeof(GetTrafficResponse::success_)
      - PROTOBUF_FIELD_OFFSET(GetTrafficResponse, traffic_total_)>(
          reinterpret_cast<char*>(&traffic_total_),
          reinterpret_cast<char*>(&other->traffic_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUsersRequest::InitAsDefaultInstance() {
}
class ListUsersRequest::_Internal {
 public:
};

ListUsersRequest::ListUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.ListUsersRequest)
}
ListUsersRequest::ListUsersRequest(const ListUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trojan.api.ListUsersRequest)
}

void ListUsersRequest::SharedCtor() {
}

ListUsersRequest::~ListUsersRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.ListUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUsersRequest::ArenaDtor(void* object) {
  ListUsersRequest* _this = reinterpret_cast< ListUsersRequest* >(object);
  (void)_this;
}
void ListUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsersRequest& ListUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsersRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void ListUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.ListUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.ListUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.ListUsersRequest)
  return target;
}

size_t ListUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.ListUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.ListUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.ListUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.ListUsersRequest)
    MergeFrom(*source);
  }
}

void ListUsersRequest::MergeFrom(const ListUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.ListUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.ListUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsersRequest::CopyFrom(const ListUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.ListUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsersRequest::IsInitialized() const {
  return true;
}

void ListUsersRequest::InternalSwap(ListUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUsersResponse::InitAsDefaultInstance() {
  ::trojan::api::_ListUsersResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
  ::trojan::api::_ListUsersResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::trojan::api::UserStatus*>(
      ::trojan::api::UserStatus::internal_default_instance());
}
class ListUsersResponse::_Internal {
 public:
  static const ::trojan::api::User& user(const ListUsersResponse* msg);
  static const ::trojan::api::UserStatus& status(const ListUsersResponse* msg);
};

const ::trojan::api::User&
ListUsersResponse::_Internal::user(const ListUsersResponse* msg) {
  return *msg->user_;
}
const ::trojan::api::UserStatus&
ListUsersResponse::_Internal::status(const ListUsersResponse* msg) {
  return *msg->status_;
}
ListUsersResponse::ListUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.ListUsersResponse)
}
ListUsersResponse::ListUsersResponse(const ListUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::trojan::api::UserStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trojan.api.ListUsersResponse)
}

void ListUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUsersResponse_trojangoapi_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&user_)) + sizeof(status_));
}

ListUsersResponse::~ListUsersResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.ListUsersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete status_;
}

void ListUsersResponse::ArenaDtor(void* object) {
  ListUsersResponse* _this = reinterpret_cast< ListUsersResponse* >(object);
  (void)_this;
}
void ListUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsersResponse& ListUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsersResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void ListUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.ListUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.UserStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.ListUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .trojan.api.UserStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.ListUsersResponse)
  return target;
}

size_t ListUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.ListUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .trojan.api.UserStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.ListUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.ListUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.ListUsersResponse)
    MergeFrom(*source);
  }
}

void ListUsersResponse::MergeFrom(const ListUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.ListUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::trojan::api::UserStatus::MergeFrom(from._internal_status());
  }
}

void ListUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.ListUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsersResponse::CopyFrom(const ListUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.ListUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsersResponse::IsInitialized() const {
  return true;
}

void ListUsersResponse::InternalSwap(ListUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUsersResponse, status_)
      + sizeof(ListUsersResponse::status_)
      - PROTOBUF_FIELD_OFFSET(ListUsersResponse, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUsersRequest::InitAsDefaultInstance() {
  ::trojan::api::_GetUsersRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
}
class GetUsersRequest::_Internal {
 public:
  static const ::trojan::api::User& user(const GetUsersRequest* msg);
};

const ::trojan::api::User&
GetUsersRequest::_Internal::user(const GetUsersRequest* msg) {
  return *msg->user_;
}
GetUsersRequest::GetUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.GetUsersRequest)
}
GetUsersRequest::GetUsersRequest(const GetUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trojan.api.GetUsersRequest)
}

void GetUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUsersRequest_trojangoapi_2eproto.base);
  user_ = nullptr;
}

GetUsersRequest::~GetUsersRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.GetUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void GetUsersRequest::ArenaDtor(void* object) {
  GetUsersRequest* _this = reinterpret_cast< GetUsersRequest* >(object);
  (void)_this;
}
void GetUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUsersRequest& GetUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUsersRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void GetUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.GetUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.GetUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.GetUsersRequest)
  return target;
}

size_t GetUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.GetUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.GetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.GetUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.GetUsersRequest)
    MergeFrom(*source);
  }
}

void GetUsersRequest::MergeFrom(const GetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.GetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
}

void GetUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.GetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUsersRequest::CopyFrom(const GetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.GetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUsersRequest::IsInitialized() const {
  return true;
}

void GetUsersRequest::InternalSwap(GetUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUsersResponse::InitAsDefaultInstance() {
  ::trojan::api::_GetUsersResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
  ::trojan::api::_GetUsersResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::trojan::api::UserStatus*>(
      ::trojan::api::UserStatus::internal_default_instance());
}
class GetUsersResponse::_Internal {
 public:
  static const ::trojan::api::User& user(const GetUsersResponse* msg);
  static const ::trojan::api::UserStatus& status(const GetUsersResponse* msg);
};

const ::trojan::api::User&
GetUsersResponse::_Internal::user(const GetUsersResponse* msg) {
  return *msg->user_;
}
const ::trojan::api::UserStatus&
GetUsersResponse::_Internal::status(const GetUsersResponse* msg) {
  return *msg->status_;
}
GetUsersResponse::GetUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.GetUsersResponse)
}
GetUsersResponse::GetUsersResponse(const GetUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::trojan::api::UserStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.GetUsersResponse)
}

void GetUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUsersResponse_trojangoapi_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&user_)) + sizeof(success_));
}

GetUsersResponse::~GetUsersResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.GetUsersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete status_;
}

void GetUsersResponse::ArenaDtor(void* object) {
  GetUsersResponse* _this = reinterpret_cast< GetUsersResponse* >(object);
  (void)_this;
}
void GetUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUsersResponse& GetUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUsersResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void GetUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.GetUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.GetUsersResponse.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.User user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.UserStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.GetUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.GetUsersResponse.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  // .trojan.api.User user = 3;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  // .trojan.api.UserStatus status = 4;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.GetUsersResponse)
  return target;
}

size_t GetUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.GetUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .trojan.api.User user = 3;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .trojan.api.UserStatus status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.GetUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.GetUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.GetUsersResponse)
    MergeFrom(*source);
  }
}

void GetUsersResponse::MergeFrom(const GetUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.GetUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::trojan::api::UserStatus::MergeFrom(from._internal_status());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void GetUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.GetUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUsersResponse::CopyFrom(const GetUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.GetUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUsersResponse::IsInitialized() const {
  return true;
}

void GetUsersResponse::InternalSwap(GetUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUsersResponse, success_)
      + sizeof(GetUsersResponse::success_)
      - PROTOBUF_FIELD_OFFSET(GetUsersResponse, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetUsersRequest::InitAsDefaultInstance() {
  ::trojan::api::_SetUsersRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
  ::trojan::api::_SetUsersRequest_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
}
class SetUsersRequest::_Internal {
 public:
  static const ::trojan::api::User& user(const SetUsersRequest* msg);
  static const ::trojan::api::Speed& speed_limit(const SetUsersRequest* msg);
};

const ::trojan::api::User&
SetUsersRequest::_Internal::user(const SetUsersRequest* msg) {
  return *msg->user_;
}
const ::trojan::api::Speed&
SetUsersRequest::_Internal::speed_limit(const SetUsersRequest* msg) {
  return *msg->speed_limit_;
}
SetUsersRequest::SetUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.SetUsersRequest)
}
SetUsersRequest::SetUsersRequest(const SetUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_speed_limit()) {
    speed_limit_ = new ::trojan::api::Speed(*from.speed_limit_);
  } else {
    speed_limit_ = nullptr;
  }
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_limit_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(ip_limit_));
  // @@protoc_insertion_point(copy_constructor:trojan.api.SetUsersRequest)
}

void SetUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetUsersRequest_trojangoapi_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_limit_) -
      reinterpret_cast<char*>(&user_)) + sizeof(ip_limit_));
}

SetUsersRequest::~SetUsersRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.SetUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete speed_limit_;
}

void SetUsersRequest::ArenaDtor(void* object) {
  SetUsersRequest* _this = reinterpret_cast< SetUsersRequest* >(object);
  (void)_this;
}
void SetUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetUsersRequest& SetUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetUsersRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void SetUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.SetUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && speed_limit_ != nullptr) {
    delete speed_limit_;
  }
  speed_limit_ = nullptr;
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_limit_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(ip_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.SetUsersRequest.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::trojan::api::SetUsersRequest_Operation>(val));
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ip_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.SetUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .trojan.api.SetUsersRequest.Operation operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // .trojan.api.Speed speed_limit = 3;
  if (this->has_speed_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::speed_limit(this), target, stream);
  }

  // int32 ip_limit = 4;
  if (this->ip_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ip_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.SetUsersRequest)
  return target;
}

size_t SetUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.SetUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .trojan.api.Speed speed_limit = 3;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_limit_);
  }

  // .trojan.api.SetUsersRequest.Operation operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // int32 ip_limit = 4;
  if (this->ip_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.SetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.SetUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.SetUsersRequest)
    MergeFrom(*source);
  }
}

void SetUsersRequest::MergeFrom(const SetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.SetUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_speed_limit()) {
    _internal_mutable_speed_limit()->::trojan::api::Speed::MergeFrom(from._internal_speed_limit());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.ip_limit() != 0) {
    _internal_set_ip_limit(from._internal_ip_limit());
  }
}

void SetUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.SetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUsersRequest::CopyFrom(const SetUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.SetUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUsersRequest::IsInitialized() const {
  return true;
}

void SetUsersRequest::InternalSwap(SetUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetUsersRequest, ip_limit_)
      + sizeof(SetUsersRequest::ip_limit_)
      - PROTOBUF_FIELD_OFFSET(SetUsersRequest, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetUsersResponse::InitAsDefaultInstance() {
}
class SetUsersResponse::_Internal {
 public:
};

SetUsersResponse::SetUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trojan.api.SetUsersResponse)
}
SetUsersResponse::SetUsersResponse(const SetUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.SetUsersResponse)
}

void SetUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetUsersResponse_trojangoapi_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

SetUsersResponse::~SetUsersResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.SetUsersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetUsersResponse::ArenaDtor(void* object) {
  SetUsersResponse* _this = reinterpret_cast< SetUsersResponse* >(object);
  (void)_this;
}
void SetUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetUsersResponse& SetUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetUsersResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void SetUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.SetUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.SetUsersResponse.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.SetUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.SetUsersResponse.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.SetUsersResponse)
  return target;
}

size_t SetUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.SetUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.SetUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.SetUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.SetUsersResponse)
    MergeFrom(*source);
  }
}

void SetUsersResponse::MergeFrom(const SetUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.SetUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SetUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.SetUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUsersResponse::CopyFrom(const SetUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.SetUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUsersResponse::IsInitialized() const {
  return true;
}

void SetUsersResponse::InternalSwap(SetUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace trojan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trojan::api::Traffic* Arena::CreateMaybeMessage< ::trojan::api::Traffic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::Traffic >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::Speed* Arena::CreateMaybeMessage< ::trojan::api::Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::User* Arena::CreateMaybeMessage< ::trojan::api::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::User >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::UserStatus* Arena::CreateMaybeMessage< ::trojan::api::UserStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::UserStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::GetTrafficRequest* Arena::CreateMaybeMessage< ::trojan::api::GetTrafficRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::GetTrafficRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::GetTrafficResponse* Arena::CreateMaybeMessage< ::trojan::api::GetTrafficResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::GetTrafficResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::ListUsersRequest* Arena::CreateMaybeMessage< ::trojan::api::ListUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::ListUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::ListUsersResponse* Arena::CreateMaybeMessage< ::trojan::api::ListUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::ListUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::GetUsersRequest* Arena::CreateMaybeMessage< ::trojan::api::GetUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::GetUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::GetUsersResponse* Arena::CreateMaybeMessage< ::trojan::api::GetUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::GetUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::SetUsersRequest* Arena::CreateMaybeMessage< ::trojan::api::SetUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::SetUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::SetUsersResponse* Arena::CreateMaybeMessage< ::trojan::api::SetUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trojan::api::SetUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
